local library = {
    windowcount = 0;
}

local dragger = {}
local resizer = {}

local mouse = game:GetService("Players").LocalPlayer:GetMouse()
local inputService = game:GetService('UserInputService')
local heartbeat = game:GetService("RunService").Heartbeat

function dragger.new(frame)
    local s, event = pcall(function()
        return frame.MouseEnter
    end)
    
    if s then
        frame.Active = true
        event:connect(function()
            local input = frame.InputBegan:connect(function(key)
                if key.UserInputType == Enum.UserInputType.MouseButton1 then
                    local objectPosition = Vector2.new(mouse.X - frame.AbsolutePosition.X, mouse.Y - frame.AbsolutePosition.Y)
                    while heartbeat:wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                        frame:TweenPosition(UDim2.new(0, mouse.X - objectPosition.X + (frame.Size.X.Offset * frame.AnchorPoint.X), 0, mouse.Y - objectPosition.Y + (frame.Size.Y.Offset * frame.AnchorPoint.Y)), 'Out', 'Quad', 0.1, true)
                    end
                end
            end)
            
            local leave
            leave = frame.MouseLeave:connect(function()
                input:disconnect()
                leave:disconnect()
            end)
        end)
    end
end

function resizer.new(p, s)
    p:GetPropertyChangedSignal('AbsoluteSize'):connect(function()
        s.Size = UDim2.new(s.Size.X.Scale, s.Size.X.Offset, s.Size.Y.Scale, p.AbsoluteSize.Y)
    end)
end

local defaults = {
    txtcolor = Color3.fromRGB(255, 255, 255),
    underline = Color3.fromRGB(0, 255, 140),
    barcolor = Color3.fromRGB(40, 40, 40),
    bgcolor = Color3.fromRGB(30, 30, 30),
}

function library:Create(class, props)
    local object = Instance.new(class)
    
    for i, prop in next, props do
        if i ~= "Parent" then
            object[i] = prop
        end
    end
    
    object.Parent = props.Parent
    return object
end

function library:RemoveGUI()
    if self.gui then
        self.gui:Destroy()
        self.gui = nil
    end
end

function library:CreateWindow(options)
    assert(options.text, "no name")
    local window = {
        count = 0,
        toggles = {},
        closed = false
    }
    
    local options = options or {}
    setmetatable(options, {__index = defaults})
    
    self.windowcount = self.windowcount + 1
    
    library.gui = library.gui or self:Create("ScreenGui", {Name = "UILibrary", Parent = game:GetService("CoreGui")})
    window.frame = self:Create("Frame", {
        Name = options.text,
        Parent = self.gui,
        Active = true,
        BackgroundTransparency = 0,
        Size = UDim2.new(0, 190, 0, 30),
        Position = UDim2.new(0, (15 + ((200 * self.windowcount) - 200)), 0, 15),
        BackgroundColor3 = options.barcolor,
        BorderSizePixel = 0
    })
    
    window.container = self:Create('Frame', {
        Name = 'Container',
        Parent = window.frame,
        BorderSizePixel = 0,
        BackgroundColor3 = options.bgcolor,
        Position = UDim2.new(0, 0, 1, 0),
        Size = UDim2.new(1, 0, 0, 25),
        ClipsDescendants = true
    })
    
    window.organizer = self:Create('UIListLayout', {
        Name = 'Sorter',
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = window.container
    })
    
    local togglebutton = self:Create("TextButton", {
        Name = 'Toggle',
        ZIndex = 2,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -25, 0, 0),
        Size = UDim2.new(0, 25, 1, 0),
        Text = "-",
        TextSize = 17,
        TextColor3 = options.txtcolor,
        Font = Enum.Font.SourceSans,
        Parent = window.frame
    })
    
    togglebutton.MouseButton1Click:connect(function()
        window.closed = not window.closed
        togglebutton.Text = (window.closed and "+" or "-")
        if window.closed then
            window:Resize(true, UDim2.new(1, 0, 0, 0))
        else
            window:Resize(true)
        end
    end)
    
    dragger.new(window.frame)
    resizer.new(window.container, window.container)
    
    function window:Resize(tween, change)
        local size = change or UDim2.new(1, 0, 0, 25)
        self.container.ClipsDescendants = true
        
        if tween then
            self.container:TweenSize(size, "Out", "Sine", 0.5, true)
        else
            self.container.Size = size
        end
    end
    
    function window:AddButton(text, callback)
        self.count = self.count + 1
        callback = callback or function() end
        
        local button = library:Create("TextButton", {
            Text = text,
            Size = UDim2.new(1, -10, 0, 20),
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextXAlignment = Enum.TextXAlignment.Left,
            TextSize = 16,
            Font = Enum.Font.SourceSans,
            LayoutOrder = self.count,
            Parent = self.container
        })
        
        button.MouseButton1Click:connect(callback)
        self:Resize()
        return button
    end
    
    return window
end

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        if library.gui then
            library.gui.Enabled = not library.gui.Enabled
        end
    end
end)

local main = library:CreateWindow({text = "Main"})
main:AddButton("Destroy GUI", function()
    library:RemoveGUI()
end)

return library
